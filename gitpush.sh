#!/bin/bash

GITPUSH_VERSION="v3.0.0"
SIMULATE=false
AUTO_CONFIRM=false

# Flags
for arg in "$@"; do
  case $arg in
    --version|-v)
      echo "gitpush $GITPUSH_VERSION"
      exit 0
      ;;
    --help)
      echo -e "Usage: gitpush [options]\n"
      echo "Options:"
      echo "  --version      Affiche la version"
      echo "  --help         Affiche cette aide"
      echo "  --simulate     Affiche les actions sans les ex√©cuter"
      echo "  --yes          Ex√©cute toutes les actions sans confirmation"
      exit 0
      ;;
    --simulate)
      SIMULATE=true
      ;;
    --yes)
      AUTO_CONFIRM=true
      ;;
  esac
  shift
done

clear

cat << "EOF"
          _ __                   __  
   ____ _(_) /_____  __  _______/ /_ 
  / __ `/ / __/ __ \/ / / / ___/ __ \
 / /_/ / / /_/ /_/ / /_/ (__  ) / / /
 \__, /_/\__/ .___/\__,_/____/_/ /_/ 
/____/     /_/                        

        üöÄ gitpush ‚Äî by Karl Block
EOF

echo -e "\033[1;36müîß Gitpush - Assistant Git interactif \033[1;35m$GITPUSH_VERSION\033[0m"

# Branche actuelle
current_branch=$(git rev-parse --abbrev-ref HEAD)
echo -e "\nüìç Branche actuelle : \033[1;35m$current_branch\033[0m"

if [[ "$current_branch" == "main" || "$current_branch" == "master" ]]; then
  echo -e "\033[1;31müö© Tu es sur une branche critique : $current_branch\033[0m"
  if ! $AUTO_CONFIRM; then
    read -p "‚ùó Continuer quand m√™me ? (y/N) : " confirm_main
    if [[ ! "$confirm_main" =~ ^[yY]$ ]]; then
      echo -e "\033[1;31m‚úò Op√©ration annul√©e.\033[0m"
      echo -e "\nüîÅ Que veux-tu faire maintenant ?"
      PS3=$'\nüëâ Ton choix : '
      options=("üîÄ Changer de branche existante" "‚ûï Cr√©er une nouvelle branche" "‚ùå Quitter")

      select opt in "${options[@]}"; do
        case $REPLY in
          1)
            echo -e "\nüìÇ Branches locales :"
            branches=$(git branch --format="%(refname:short)" | grep -vE "^(main|master)$")
            select branch in $branches "Retour"; do
              if [[ "$branch" == "Retour" ]]; then
                break
              elif [[ -n "$branch" ]]; then
                git switch "$branch"
                current_branch="$branch"
                echo -e "\033[1;32m‚úî Switched to branch: $branch\033[0m"
                break 2
              else
                echo "‚ùå Choix invalide."
              fi
            done
            ;;
          2)
            read -p "üåü Nom de la nouvelle branche : " new_branch
            if [[ -n "$new_branch" ]]; then
              git checkout -b "$new_branch"
              current_branch="$new_branch"
              echo -e "\033[1;32m‚úî Nouvelle branche cr√©√©e et s√©lectionn√©e : $new_branch\033[0m"
              break
            else
              echo "‚ö†Ô∏è Nom invalide."
            fi
            ;;
          3)
            echo -e "\033[1;33müëã √Ä bient√¥t !\033[0m"
            exit 0
            ;;
          *)
            echo "‚ùå Choix invalide."
            ;;
        esac
      done
    fi
  fi
fi

# Simulation (exemple d‚Äôutilisation)
if $SIMULATE; then
  echo -e "\nüî¢ Mode simulation activ√© : aucune commande ne sera ex√©cut√©e."
fi

# Message de commit
read -p "‚úèÔ∏è Message de commit : " msg
[ -z "$msg" ] && { echo -e "\033[1;31m‚úò Message requis.\033[0m"; exit 1; }

read -p "üîÑ Faire un pull --rebase avant ? (y/N) : " do_sync
read -p "üè∑Ô∏è  Cr√©er un tag ? (y/N) : " do_tag
if [[ "$do_tag" =~ ^[yY]$ ]]; then
  read -p "‚ûï Utiliser un tag personnalis√© (ex: v1.2.0) ou laisser en auto ? [auto|vX.Y.Z] : " custom_tag
fi
read -p "üöÄ Cr√©er une GitHub Release ? (y/N) : " do_release

echo -e "\nüì¶ R√©sum√© de l'action :"
echo -e "‚Ä¢ üìù Commit : \033[1;32m$msg\033[0m"
[[ "$do_sync" =~ ^[yY]$ ]] && echo -e "‚Ä¢ üîÑ Pull : \033[1;36mactiv√©\033[0m" || echo -e "‚Ä¢ üîÑ Pull : d√©sactiv√©"
[[ "$do_tag" =~ ^[yY]$ ]] && echo -e "‚Ä¢ üè∑Ô∏è  Tag : \033[1;33m${custom_tag:-auto}\033[0m" || echo -e "‚Ä¢ üè∑Ô∏è  Tag : non"
[[ "$do_release" =~ ^[yY]$ ]] && echo -e "‚Ä¢ üöÄ Release : \033[1;36moui\033[0m" || echo -e "‚Ä¢ üöÄ Release : non"

read -p $'\n‚úÖ Confirmer et lancer ? (y/N) : ' confirm_run
[[ "$confirm_run" =~ ^[yY]$ ]] || { echo -e "\033[1;31m‚úò Annul√©.\033[0m"; exit 1; }

git add .
git commit -m "$msg"
[[ "$do_sync" =~ ^[yY]$ ]] && git pull --rebase
git push

# Tagging s√©curis√©
if [[ "$do_tag" =~ ^[yY]$ ]]; then
  if [[ "$custom_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    new_tag="$custom_tag"
  else
    last_tag=$(git tag --sort=-v:refname | head -n 1)
    if [[ $last_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
      major=${BASH_REMATCH[1]}
      minor=${BASH_REMATCH[2]}
      patch=$((BASH_REMATCH[3] + 1))
      new_tag="v$major.$minor.$patch"
    else
      new_tag="v0.0.1"
    fi
  fi

  if git tag | grep -q "^$new_tag$"; then
    echo -e "\033[1;31m‚ö†Ô∏è Le tag $new_tag existe d√©j√†. Aucun tag ajout√©.\033[0m"
  else
    git tag "$new_tag"
    git push origin "$new_tag"
    echo -e "\033[1;32m‚úÖ Tag $new_tag ajout√© et pouss√©.\033[0m"

    # Mise √† jour CHANGELOG
    echo -e "## $new_tag - $(date +%F)\n- $msg\n" | cat - CHANGELOG.md 2>/dev/null > temp && mv temp CHANGELOG.md
    git add CHANGELOG.md
    git commit -m "docs: update CHANGELOG for $new_tag"
    git push
  fi
fi

# GitHub Release
if [[ "$do_release" =~ ^[yY]$ ]]; then
  if command -v gh &> /dev/null; then
    if [[ -n "$new_tag" ]] && git tag | grep -q "^$new_tag$"; then
      gh release create "$new_tag" --title "$new_tag" --generate-notes
    else
      echo -e "\033[1;33m‚ö†Ô∏è Aucune release cr√©√©e car le tag est manquant ou existait d√©j√†.\033[0m"
    fi
  else
    echo -e "\033[1;31m‚ö†Ô∏è GitHub CLI non install√©, release ignor√©e.\033[0m"
  fi
fi

# Ouvrir la page GitHub
remote_url=$(git config --get remote.origin.url)
if [[ $remote_url == git@github.com:* ]]; then
  web_url="https://github.com/${remote_url#git@github.com:}"
  web_url="${web_url%.git}"
elif [[ $remote_url == https://github.com/* ]]; then
  web_url="${remote_url%.git}"
fi

[[ -n "$web_url" ]] && xdg-open "$web_url" > /dev/null 2>&1 &
